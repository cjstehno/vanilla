plugins {
    id "org.asciidoctor.convert" version "1.5.7"
    id "com.stehno.gradle.webpreview" version "0.3.0"
    id "com.stehno.gradle.site" version "0.0.3"
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'groovy'
    id 'maven-publish'
    id 'codenarc'
    id 'jacoco'
    id 'com.jfrog.bintray' version '1.8.0'
    id "com.github.hierynomus.license" version "0.14.0"
    id "com.github.ben-manes.versions" version "0.17.0"
}

version = '0.6.0'
group = 'com.stehno.vanilla'

sourceCompatibility = 8
targetCompatibility = 8

repositories {
    jcenter()
}

configurations {
    groovyDoc
}

dependencies {
    compile 'com.mockrunner:mockrunner-jdbc:1.1.2'

    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    testCompile 'junit:junit:4.12'
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'

    groovyDoc "org.codehaus.groovy:groovy-groovydoc:$groovyVersion"
    groovyDoc "org.codehaus.groovy:groovy-ant:$groovyVersion"

    codenarc(
        "org.codenarc:CodeNarc:$codeNarcVersion",
        "org.codehaus.groovy:groovy-all:$groovyVersion"
    )
}

test {
    maxParallelForks = Math.min(Runtime.runtime.availableProcessors(), 8)
}

groovydoc {
    groovyClasspath = configurations.groovyDoc
}

codenarc {
    toolVersion = codeNarcVersion
}

codenarcMain {
    ignoreFailures true
    configFile file('config/codenarc-main.rules')

    maxPriority1Violations 0
    maxPriority2Violations 5
    maxPriority3Violations 10
}

codenarcTest {
    ignoreFailures true
    configFile file('config/codenarc-test.rules')
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

jar.baseName = 'vanilla-core'

task sourcesJar(type: Jar) {
    description = 'Creates sources JAR.'
    classifier = 'sources'

    from project.sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
}

license {
    header file('config/license_header.txt')
    ext.year = Calendar.instance.get(Calendar.YEAR)

    excludes(['**/*.txt'])
}

// NOTE: run bintrayUpload and then go to web and publish.
bintray {
    user = project.property('user')
    key = project.property('key')

    publications = ['mavenJava']

    pkg {
        repo = 'stehno'
        name = 'vanilla-core'
        desc = 'Reusable Groovy libraries.'
        licenses = ['Apache-2.0']
        labels = ['groovy']
    }
}

asciidoctor {
    options doctype: 'book'

    backends = ['html5']

    attributes 'source-highlighter': 'coderay',
        'coderay-linenums-mode': 'table',
        icon: 'font',
        linkattrs: true,
        encoding: 'utf-8'
}

tasks.site.dependsOn = ['build', 'groovydoc', 'jacocoTestReport', 'asciidoctor']

task publishSite(type: GradleBuild, group: 'Publishing', description: 'Publishes the documentation web site.', dependsOn: ['site']) {
    buildFile = 'publish.gradle'
    tasks = ['publishGhPages']
}

site {
    siteUrl = 'http://stehno.com/vanilla'

    assetDir( 'build/reports', into:'core', external:true )
    assetDir( 'build/docs/groovydoc', into:'core/groovydoc', external: true)
}

webPreview {
    contextPath = 'vanilla'
}
